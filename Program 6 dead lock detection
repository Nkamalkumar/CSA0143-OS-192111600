#include <stdio.h>

#define N_PROCESSES 3
#define N_RESOURCES 3

int main() {
    int max[N_PROCESSES][N_RESOURCES] = {{3, 6, 8}, {4, 3, 3}, {3, 4, 4}};
    int allocation[N_PROCESSES][N_RESOURCES] = {{3, 3, 3}, {2, 0, 3}, {1, 2, 4}};
    int available[N_RESOURCES] = {1, 2, 0};
    int need[N_PROCESSES][N_RESOURCES];

    // Calculate the need matrix
    for (int i = 0; i < N_PROCESSES; i++) {
        for (int j = 0; j < N_RESOURCES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Initialize the finish array to false
    int finish[N_PROCESSES] = {0};

    // Initialize the work array to the available resources
    int work[N_RESOURCES];
    for (int i = 0; i < N_RESOURCES; i++) {
        work[i] = available[i];
    }

    // Find a process that can be completed
    int found = 1;
    while (found) {
        found = 0;
        for (int i = 0; i < N_PROCESSES; i++) {
            if (!finish[i]) {
                int can_complete = 1;
                for (int j = 0; j < N_RESOURCES; j++) {
                    if (need[i][j] > work[j]) {
                        can_complete = 0;
                        break;
                    }
                }
                if (can_complete) {
                    found = 1;
                    finish[i] = 1;
                    for (int j = 0; j < N_RESOURCES; j++) {
                        work[j] += allocation[i][j];
                    }
                }
            }
        }
    }

    // Check if all processes have finished
    int deadlock = 0;
    for (int i = 0; i < N_PROCESSES; i++) {
        if (!finish[i]) {
            deadlock = 1;
            printf("Process %d is deadlocked\n", i);
        }
    }

    if (!deadlock) {
        printf("The system is not deadlocked\n");
    }

    return 0;
}
