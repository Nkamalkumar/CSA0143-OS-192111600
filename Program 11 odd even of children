#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

void print_odds() {
    printf("Printing odd numbers\n");
    for(int i = 1; i <= 10; i++) {
        if(i % 2 != 0) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

void print_evens() {
    printf("Printing even numbers\n");
    for(int i = 1; i <= 10; i++) {
        if(i % 2 == 0) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

void print_multiples_of_3() {
    printf("Printing multiples of 3\n");
    for(int i = 1; i <= 10; i++) {
        if(i % 3 == 0) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

void print_multiples_of_5() {
    printf("Printing multiples of 5\n");
    for(int i = 1; i <= 10; i++) {
        if(i % 5 == 0) {
            printf("%d ", i);
        }
    }
    printf("\n");
}

int main() {
    pid_t pid1, pid2, pid3, pid4;

    pid1 = fork();

    if(pid1 < 0) {
        printf("Error creating process 1\n");
        exit(-1);
    } else if(pid1 == 0) {
        printf("Process 1 (PID %d)\n", getpid());
        print_odds();
    } else {
        pid2 = fork();

        if(pid2 < 0) {
            printf("Error creating process 2\n");
            exit(-1);
        } else if(pid2 == 0) {
            printf("Process 2 (PID %d)\n", getpid());
            print_evens();
        } else {
            pid3 = fork();

            if(pid3 < 0) {
                printf("Error creating process 3\n");
                exit(-1);
            } else if(pid3 == 0) {
                printf("Process 3 (PID %d)\n", getpid());
                print_multiples_of_3();
            } else {
                pid4 = fork();

                if(pid4 < 0) {
                    printf("Error creating process 4\n");
                    exit(-1);
                } else if(pid4 == 0) {
                    printf("Process 4 (PID %d)\n", getpid());
                    print_multiples_of_5();
                } else {
                    // parent process
                    printf("Parent process (PID %d)\n", getpid());
                    printf("Created child processes: %d, %d, %d, %d\n", pid1, pid2, pid3, pid4);
                }
            }
        }
    }

    return 0;
}
